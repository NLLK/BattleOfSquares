using NUnit.Framework;
using System;

namespace BattleOfSquares.Tests
{
    [TestFixture]
    class GridSystemTest
    {
        [TestCase(5, 5, 7, 0, 0, 0,-1)]
        [TestCase(1, 1, 0, 0, 0, 0, -1)]
        [TestCase(2, 3, 6, 7, 1, 0, 0)]
        public void isItFitTest(int width, int height, int x, int y, int rotate, int team, int expected)
        {
            int[,] array = new int[20, 20]{
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,23,23,23,9,9,9,11,11,11,11,11},
                { 1,1,1,1,13,13,13,13,5,27,27,27,25,25,21,11,11,11,11,11},
                { 1,1,1,1,13,13,13,13,31,27,27,27,25,25,21,15,15,15,15,15},
                { 17,17,17,17,17,17,0,0,0,27,27,27,25,25,21,19,19,19,19,19},
                { 0,0,0,0,0,0,0,0,0,27,27,27,25,25,21,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,0,0,29,29,29,29,21,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,0,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,0,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,0,0,0,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,0,0,0,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,12,12,18,18,8,8,14,14,14,14,2,2,2,2,2},
                { 0,0,24,24,24,12,12,18,18,8,8,6,16,16,16,2,2,2,2,2},
                { 0,0,24,24,24,12,12,10,10,8,8,6,16,16,16,2,2,2,2,2},
                { 0,0,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2},
                { 22,22,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2},
                { 22,22,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2} };

            GridSystem gs = new GridSystem();

            gs.gridArray = array;
            int result = gs.isItFit(width, height, x, y, rotate, team);

            Assert.AreEqual(result, expected);
        }
        [TestCase(1, 2, 7, 0, 0,0)]
        [TestCase(1, 2, 7, 0, 1, 1)]
        [TestCase(2, 3, 6, 7, 1,0)]
        public void isItOnRightPlace(int width, int height, int x, int y, int team, int expected)
        {
            int[,] array = new int[20, 20]{
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,23,23,23,9,9,9,11,11,11,11,11},
                { 1,1,1,1,13,13,13,13,5,27,27,27,25,25,21,11,11,11,11,11},
                { 1,1,1,1,13,13,13,13,31,27,27,27,25,25,21,15,15,15,15,15},
                { 17,17,17,17,17,17,0,0,0,27,27,27,25,25,21,19,19,19,19,19},
                { 0,0,0,0,0,0,0,0,0,27,27,27,25,25,21,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,0,0,29,29,29,29,21,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,0,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,0,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,0,0,0,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,0,0,0,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,12,12,18,18,8,8,14,14,14,14,2,2,2,2,2},
                { 0,0,24,24,24,12,12,18,18,8,8,6,16,16,16,2,2,2,2,2},
                { 0,0,24,24,24,12,12,10,10,8,8,6,16,16,16,2,2,2,2,2},
                { 0,0,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2},
                { 22,22,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2},
                { 22,22,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2} };

            GridSystem gs = new GridSystem();

            gs.gridArray = array;
            int result = gs.isOnRightPlace(width, height, x, y, team);

            Assert.AreEqual(result, expected);
        }
        [TestCase("1-1", 0, false)]
        [TestCase("1-2", 0, false)]
        [TestCase("1-6", 0, false)]
        [TestCase("4-6", 0, true)]
        [TestCase("4-6", 1, true)]
        public void isItTheEnd(string name, int team, bool expected)
        {
            int[,] array = new int[20, 20]{
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,7,7,7,9,9,9,11,11,11,11,11},
                { 1,1,1,1,3,3,3,3,5,23,23,23,9,9,9,11,11,11,11,11},
                { 1,1,1,1,13,13,13,13,5,27,27,27,25,25,21,11,11,11,11,11},
                { 1,1,1,1,13,13,13,13,31,27,27,27,25,25,21,15,15,15,15,15},
                { 17,17,17,17,17,17,0,0,0,27,27,27,25,25,21,19,19,19,19,19},
                { 0,0,0,0,0,0,0,0,0,27,27,27,25,25,21,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,0,0,29,29,29,29,21,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,0,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,0,19,19,19,19,19},
                { 0,0,0,30,30,30,30,30,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,0,0,0,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,0,0,0,28,28,28,28,28,28,26,26,26,26,26,26},
                { 0,0,24,24,24,12,12,18,18,8,8,14,14,14,14,2,2,2,2,2},
                { 0,0,24,24,24,12,12,18,18,8,8,6,16,16,16,2,2,2,2,2},
                { 0,0,24,24,24,12,12,10,10,8,8,6,16,16,16,2,2,2,2,2},
                { 0,0,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2},
                { 22,22,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2},
                { 22,22,20,20,20,12,12,10,10,8,8,6,4,4,4,2,2,2,2,2} };
            int w = Convert.ToInt16(name.Substring(0, 1));
            int h = Convert.ToInt16(name.Substring(2, 1));

            GridSystem gs = new GridSystem();

            gs.gridArray = array;
            bool result = gs.isItTheEnd(name, team);

            Assert.AreEqual(result, expected);

        }

    }
}
